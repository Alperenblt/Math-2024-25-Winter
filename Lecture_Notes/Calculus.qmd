---
title: Calculus
format:
  html:
    toc: true
    toc-location: left
    toc-depth: 3
    page-layout: full
    grid:
      body-width: 1000px
      sidebar-width: 300px
      margin-width: 300px
      gutter-width: 2rem
    theme:
      light: [flatly, custom.scss]
      dark: [darkly, custom.scss]
    self-contained: true
---

## What is a function?

**Set-theory definition of a function** states that a function $f$ is a special case of a relation. A relation is simply any set of ordered pairs. A function, on the other hand, is a relation $f \subseteq X \times Y$ that satisfies an additional condition: for each element $x \in X$, there is **exactly one** element $y \in Y$ assigned to it.

Formally, a function $f$ is a relation that satisfies the following condition:

$$
\forall x_1, x_2 \in X, \, \forall y_1, y_2 \in Y \, \left( (x_1, y_1) \in f \land (x_2, y_2) \in f : (x_1 = x_2) \Rightarrow (y_1 = y_2) \right)
$$

This means that if for the same $x_1$ we have two pairs $(x_1, y_1)$ and $(x_1, y_2)$, then $y_1$ must be equal to $y_2$. In other words, no element from $X$ can be "associated" with more than one element from $Y$.

#### Important Points:
1. **Relation** in set theory is simply a set of ordered pairs $(x, y)$, where $x$ comes from set $X$ and $y$ comes from set $Y$.
2. **Function** is a relation that additionally satisfies the condition that for every $x$ there is exactly one pair $(x, y)$ in this relation.

Thus, a function $f \subseteq X \times Y$ is a relation that satisfies the additional condition that for each $x \in X$ there is exactly one $y \in Y$ such that $(x, y) \in f$.

#### Examples

**Example 1**

$$
f=\{(\text{dog}, \text{pies}), (\text{cat}, \text{kot}), (\text{horse}, \text{koÅ„})\}
$$

**Example 2**

$$
f=\{(1,2), (2,3), (3,4)\}
$$

This means that $f(1)=2$, $f(2)=3$, and $f(3)=4$.

**Example 3**

$$
f=\{(1,1),(2,1/2),(3,1/3),...\}=\{(n,1/n): n \in \mathbb{N}\}
$$

```{python}
import numpy as np
import matplotlib.pyplot as plt

def f(n):
    return 1/n

fig, ax = plt.subplots(figsize=(6,4))
n=np.arange(1,20)
plt.scatter(n,f(n))
plt.xlabel('n')
plt.ylabel('f(n)')
plt.xticks(np.arange(1,20,1))
plt.show()
```

where $\mathbb{N}$ denotes the set of natural numbers. This function assigns each $n$ the value $1/n$.

We often denote sequences using $f(n)=1/n$.

**Example 4**

The quadratic function often written as $f(x)=x^2$ is a function that assigns each $x$ the value $x^2$. In our notation, we write this as

$$
f=\{(x,x^2): x \in \mathbb{R}\}
$$

where $\mathbb{R}$ denotes the set of real numbers.

```{python}
def f(x):
    return x**2

fig, ax = plt.subplots(figsize=(6,4))
x=np.linspace(-10,10,100)
plt.plot(x,f(x))
plt.xlabel('x')
plt.ylabel('f(x)')
plt.show()
```

where $\mathbb{R}$ denotes the set of real numbers.

**Example 5**

The determinant of a matrix is a function that assigns each matrix a number. In our notation, we write this as

$$
f=\{(M,\text{det}(M)): M \text{ is a square matrix}\}
$$

**Example 6**

A matrix itself is also a function that assigns each pair of indices $(i,j)$ where $i,j \in \{1,2,...,n\}$ the element of the matrix at position $(i,j)$. In our notation, we write this as

$$
M=\{((i,j),M_{ij}): i,j \in \{1,2,...,n\}\}
$$

for convenience, we write this as a two-dimensional array:

$$
M=\begin{bmatrix}
M_{11} & M_{12} & \cdots & M_{1n} \\
M_{21} & M_{22} & \cdots & M_{2n} \\
\vdots & \vdots & \ddots & \vdots \\
M_{n1} & M_{n2} & \cdots & M_{nn}
\end{bmatrix}
$$

**Example 7**

Matrix addition is a function that assigns each pair of matrices their sum. In our notation, we write this as

$$
f=\{((A,B),A+B): A,B \text{ are matrices of the same dimensions}\}
$$

where $A+B$ is the matrix whose elements are the sums of the elements of matrices $A$ and $B$, that is, for each $i,j$ we have 
$$
(A+B)_{ij}=A_{ij}+B_{ij}
$$

**Example 8**

A dictionary in Python is also a function that assigns each key a value. In our notation, we write this as:

```{python}
d={'a':1, 'b':2, 'c':3}
```

### Geogebra examples

Check the following examples in Geogebra:

* ax^3 + bx^2 + cx + d
* sin(ax + b)
* e^( -x^2 / s)
* x^2 + y^3 = 1
* ImplicitCurve(xx+yyy-1)  which is the same as the previous one
* ImplicitCurve(sin(x) + cos(y) - 1)

## Limits of functions

### Sequences

An idea of a limit of sequence is very simple. It is a number that the sequence approaches as we take more and more elements of the sequence. For example, the sequence $a_n=\frac{1}{n}$ approaches 0 as we take more and more elements of the sequence. We write this as

$$
\lim_{n \to \infty} a_n=0
$$

Formal definition of a limit of a sequence is as follows:

::: {.definition}
**Definition: Limit of a sequence**

A number $g$ is the limit of a sequence $a_n$ if for every $\varepsilon>0$ there exists $N$ such that for every $n>N$ we have $|a_n-g|<\epsilon$. 
We write this as $$\lim_{n \to \infty} a_n=g$$.
:::

```{python}
import numpy as np
import matplotlib.pyplot as plt

# Function definition
def a(n):
    return 3 * n**2 / (n**2 + 1)

# Parameters for visualization
epsilon = 0.1  # Epsilon value to represent the "margin" around the limit
N = 6  # Chosen N for the definition of limit

# Generate data points
n = np.arange(1, 20)  # Range of n values for plotting
a_values = a(n)  # Compute the function values

# Compute the limit for large n (L = 3)
limit = 3

# Create the plot
fig, ax = plt.subplots(figsize=(8, 5))
plt.scatter(n, a_values, label="Sequence $a(n) = \\frac{3n^2}{n^2 + 1}$", color="blue")  # Sequence points
plt.axhline(y=limit, color="green", linestyle="-", label="Limit $L = 3$")  # The limit line
plt.axhline(y=limit + epsilon, color="red", linestyle="--", label="$L + \\varepsilon$")  # Upper epsilon bound
plt.axhline(y=limit - epsilon, color="red", linestyle="--", label="$L - \\varepsilon$")  # Lower epsilon bound
plt.axvline(x=N, color="orange", linestyle="--", label="$N = 10$")  # Vertical line for N

# Annotate the plot
plt.title("Visualization of Limit of $a(n)$ as $n \\to \\infty$")
plt.xlabel("$n$")
plt.ylabel("$a(n)$")
plt.legend(loc="lower right")
plt.grid(True)

# Display the plot
plt.show()

```


Some important points to note about limits of sequences are:

1. The limit of a sequence is unique. This means that if a sequence has a limit, then this limit is unique.
2. If a sequence has a limit, then the sequence is bounded. This means that there exists a number $M$ such that $|a_n| \leq M$ for all $n$.

To compute the limit of a sequence, we often use the following rules:

1. The limit of a sum of sequences is the sum of the limits of the sequences.

$$
\lim_{n \to \infty} (a_n\pm b_n)=\lim_{n \to \infty} a_n\pm\lim_{n \to \infty} b_n
$$

2. The limit of a product of sequences is the product of the limits of the sequences.

$$
\lim_{n \to \infty} (a_n \cdot b_n)=\lim_{n \to \infty} a_n \cdot \lim_{n \to \infty} b_n
$$

3. The limit of a quotient of sequences is the quotient of the limits of the sequences.

$$
\lim_{n \to \infty} \frac{a_n}{b_n}=\frac{\lim\limits_{n \to \infty} a_n}{\lim\limits_{n \to \infty} b_n}
$$

4. The limit of a sequence raised to a power is the limit of the sequence raised to the power.

$$
\lim_{n \to \infty} a_n^k=(\lim_{n \to \infty} a_n)^k
$$


::: {.theorem}
**The Squeeze Theorem**

If $a_n \leq b_n \leq c_n$ for all $n$ and $\lim\limits_{n \to \infty} a_n=\lim\limits_{n \to \infty} c_n=g$, then $\lim\limits_{n \to \infty} b_n=g$.
:::

Interpretation of the Squeeze Theorem is that if a sequence is squeezed between two sequences that have the same limit, then the sequence itself has the same limit.

**Example**

Let:

$$
a_n=-\frac{1}{n}, 
\quad 
b_n=\frac{\sin(n)}{n}
, \quad
c_n=\frac{1}{n}
$$

Then we have $a_n \leq b_n \leq c_n$ for all $n$. We also have 

$$
\lim_{n \to \infty} a_n=\lim_{n \to \infty} c_n=0
$$

Therefore, by the Squeeze Theorem, we have

$$
\lim_{n \to \infty} \frac{\sin(n)}{n}=0
$$

```{python}
import numpy as np
import matplotlib.pyplot as plt

def a(n):
    return -1/n
def b(n):
    return np.sin(n)/n
def c(n):
    return 1/n

fig, ax = plt.subplots(figsize=(6,4))
n=np.arange(1,20)
plt.scatter(n,a(n),label='a(n)')
plt.scatter(n,b(n),label='b(n)')
plt.scatter(n,c(n),label='c(n)')
plt.xlabel('n')
plt.ylabel('f(n)')
plt.legend()
plt.show()
```


## Limits of Functions

### Definition

The limit of a function describes the behavior of the function as its input approaches a certain value. We denote it as:

$$
\lim_{x \to c} f(x) = L
$$

This means that as $x$ approaches $c$, the values of $f(x)$ get arbitrarily close to $L$.

#### Formal Definition

**Definition**: Let $f(x)$ be a function defined on some open interval containing $c$, except possibly at $c$ itself. We say that 

$$
\lim_{x \to c} f(x) = L
$$

if for every $\varepsilon > 0$ there exists a $\delta > 0$ such that whenever $0 < |x - c| < \delta$, we have 

$$
|f(x) - L| < \varepsilon.
$$

[aplet1](https://www.geogebra.org/m/cwvFraYf)
[aplet2](https://www.geogebra.org/m/ksuyccpy)

![](additional_files/ep.jpg){width=400px}

#### One-Sided Limits

Limits can also be evaluated as $x$ approaches $c$ from one side:

- **Left-hand limit**: If $x$ approaches $c$ from the left ($x \to c^-$), then:
  $$
  \lim_{x \to c^-} f(x) = L
  $$

- **Right-hand limit**: If $x$ approaches $c$ from the right ($x \to c^+$), then:
  $$
  \lim_{x \to c^+} f(x) = L
  $$

```{python}
import numpy as np
import matplotlib.pyplot as plt

def fun(x):
    return 1/(1+np.exp(-1/x))

fig, ax = plt.subplots(figsize=(6,4))
x=np.linspace(-3,3,500)
plt.scatter(x,fun(x),s=5)
plt.xlabel('x')
plt.ylabel('f(x)')
plt.text(0,0.5,r'$f(x)=\frac{1}{1+e^{-1/x}}$', fontsize=16)
plt.show()
```

The **two-sided limit** exists if and only if:
$$
\lim_{x \to c^-} f(x) = \lim_{x \to c^+} f(x) = L.
$$

#### Properties of Limits

For functions $f(x)$ and $g(x)$ with limits $\lim_{x \to c} f(x) = L_1$ and $\lim_{x \to c} g(x) = L_2$:

**Sum**:
   $$
   \lim_{x \to c} [f(x) \pm g(x)] = \lim_{x \to c} f(x) \pm \lim_{x \to c} g(x) = L_1 + L_2
   $$


**Product**:
   $$
   \lim_{x \to c} [f(x) \cdot g(x)] = \lim_{x \to c} f(x) \cdot \lim_{x \to c} g(x) = L_1 \cdot L_2
   $$

**Quotient** (if $\lim_{x \to c} g(x) \neq 0$):
   $$
   \lim_{x \to c} \frac{f(x)}{g(x)} = \frac{\lim_{x \to c} f(x)}{\lim_{x \to c} g(x)} = \frac{L_1}{L_2}
   $$

**Power**:
   $$
   \lim_{x \to c} [f(x)]^k = \left(\lim_{x \to c} f(x)\right)^k = L_1^k, \quad k \in \mathbb{R}.
   $$

### Limits at Infinity

If there is a number $L$ such that for every $\varepsilon > 0$ there exists a number $M$ such that for all $x > M$ we have $|f(x) - L| < \varepsilon$, then we write:
$$
\lim_{x \to \infty} f(x) = L
$$

Similarly, if there is a number $L$ such that for every $\varepsilon > 0$ there exists a number $M$ such that for all $x < M$ we have $|f(x) - L| < \varepsilon$, then we write:

$$
\lim_{x \to -\infty} f(x) = L
$$

### Asymptotes

An **asymptote** is a line that a curve approaches when $x$ becomes very large then the curve approaches a line $y=ax+b$

$$
f(x)\sim ax+b \qquad \text{for large } x
$$

which formaly means that

$$
\lim_{x \to \infty} (f(x) - ax+b) = 0
$$

Find $a$:

$$
a=\lim_{x \to \infty} \frac{f(x)}{x}
$$

Find $b$:

$$
b=\lim_{x \to \infty} (f(x) - ax)
$$

Example: Find the asymptotes of the function $f(x)=\frac{x^3+3x^2+1}{3x^2}$

**Find**

$$
a=\lim_{x \to \infty} \frac{x^3+3x^2+1}{3x^2\cdot x}
=
\lim_{x \to \infty} \frac{1}{3}
$$

$$
\begin{align*}
b
&=\lim_{x \to \infty} \left(\frac{x^3+3x^2+1}{3x^2}-\frac{1}{3}x\right)\\
&=\lim_{x \to \infty} \left(\frac{x^3+3x^2+1-x^3}{3x^2}\right)\\
&=\lim_{x \to \infty} \left(\frac{3x^2+1}{3x^2}\right)\\
&=\lim_{x \to \infty} \left(1+\frac{1}{3x^2}\right)\\
&=1
\end{align*}
$$

Therefore, the asymptote of the function $f(x)=\frac{x^3+3x^2+1}{3x^2}$ is $y=\frac{1}{3}x+1$.

```{python}
import numpy as np
import matplotlib.pyplot as plt
def f(x):
    return (x**3+3*x**2+1)/(3*x**2)

def line(x):
    return 1/3*x+1

fig, ax = plt.subplots(figsize=(6,4))
x=np.linspace(-10,10,100)
plt.plot(x,f(x),label='f(x)')
plt.plot(x,line(x),label='asymptote')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.legend()
plt.show()
```

## Countinuity

### Definition

A function $f(x)$ is **continuous** at a point $x=a$ if the following three conditions are satisfied:

1. $f(a)$ is defined.
2. $\lim_{x \to a} f(x)$ exists.
3. $\lim_{x \to a} f(x) = f(a)$.


## Derivatives

### Definition

The **derivative** of a function $f(x)$ at a point $x=a$ is defined as:

$$
f'({\color{red}a}) = \lim_{{\color{blue}h} \to 0} \frac{f({\color{red}a}+{\color{blue}h}) - f({\color{red}a})}{{\color{blue}h}}
$$
This limit represents the slope of the tangent line to the curve $y=f(x)$ at the point $(a, f(a))$.

```{python}
import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return x**2

def f_prime(x):
    return 2*x

def tangent_line(x, a):
    return f_prime(a)*(x-a) + f(a)

fig, ax = plt.subplots(figsize=(6,4))
x=np.linspace(-10,10,100)
plt.plot(x,f(x),label='f(x)')
plt.plot(x,tangent_line(x,2),label='tangent line at x=2')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.legend()
plt.scatter(2,f(2),color='red')
plt.show()
```

#### Interpretation

The derivative of a function at a point gives the rate of change of the function at that point. It tells us how the function value changes as the input changes slightly.

**Example**: Let $f(x)=\sin(x)$. Then the derivative of $f(x)$ at $x=a$ is $f'(a)=\cos(a)$. Now we will prove this.

**Proof**: From trigonometry, we know that $sin(a+h)=sin(a)cos(h)+cos(a)sin(h)$. Therefore, we have

$$
\begin{align*}
f'({\color{red}a})
&=\lim_{{\color{blue}h} \to 0} \frac{\sin({\color{red}a}+{\color{blue}h})-\sin({\color{red}a})}{{\color{blue}h}}\\
&=\lim_{{\color{blue}h} \to 0} \frac{\sin({\color{red}a})\cos({\color{blue}h})+\cos({\color{red}a})\sin({\color{blue}h})-\sin({\color{red}a})}{{\color{blue}h}}\\
&=\lim_{{\color{blue}h} \to 0} \frac{\sin({\color{red}a})(\cos({\color{blue}h})-1)+\cos({\color{red}a})\sin({\color{blue}h})}{{\color{blue}h}}\\
&=\cos({\color{red}a})\lim_{{\color{blue}h} \to 0} \frac{\sin({\color{blue}h})}{{\color{blue}h}}\\
&=\cos({\color{red}a})
\end{align*}
$$


**Example**: Let $f(x)=x^3$. Then the derivative of $f(x)$ at $x=a$ is $f'(a)=3a^2$. Now we will prove this.

**Proof**: We have

$$
\begin{align*}
f'({\color{red}a})&=
\lim_{{\color{blue}h} \to 0} \frac{({\color{red}a}+{\color{blue}h})^3-{\color{red}a}^3}{{\color{blue}h}}\\
&=\lim_{{\color{blue}h} \to 0} \frac{{\color{red}a}^3+3{\color{red}a}^2{\color{blue}h}+3{\color{red}a}{\color{blue}h}^2+{\color{blue}h}^3-{\color{red}a}^3}{{\color{blue}h}}\\
&=\lim_{{\color{blue}h} \to 0} 3{\color{red}a}^2+3{\color{red}a}{\color{blue}h}+{\color{blue}h}^2\\
&=3{\color{red}a}^2
\end{align*}
$$



#### Basic Derivatives

| Function $f(x)$ | Derivative $f'(x)$ |
|------------------|--------------------|
| $c$              | $0$                |
| $x$              | $1$                |
| $x^n$            | $nx^{n-1}$         |
| $e^x$            | $e^x$              |
| $a^x$            | $a^x \ln(a)$       |
| $\ln(x)$         | $\frac{1}{x}$      |
| $\log_a(x)$      | $\frac{1}{x \ln(a)}$ |
| $\sin(x)$        | $\cos(x)$          |
| $\cos(x)$        | $-\sin(x)$         |

### Basic Theorems

**Basics**

$$
\begin{align*}
({\color{red}f}\pm {\color{blue}g})'(x)&={\color{red}f}'(x)\pm {\color{blue}g}'(x)\\
({\color{red}f}{\color{blue}g})'(x)&={\color{red}f}'(x){\color{blue}g}(x)+{\color{red}f}(x){\color{blue}g}'(x)\\
\left(\frac{{\color{red}f}}{{\color{blue}g}}\right)'(x)&=\frac{{\color{red}f}'(x){\color{blue}g}(x)-{\color{red}f}(x){\color{blue}g}'(x)}{{\color{blue}g}^2(x)}\\
({\color{red}f}^n)'(x)&=n{\color{red}f}'(x){\color{red}f}^{n-1}(x)
\end{align*}
$$

**Applications**

##### Second example

$$
\begin{align*}
({\color{blue}{\cos(x)}}{\color{red}{e^x}})' 
&= ({\color{blue}{\cos(x)}})' {\color{red}{e^x}} + {\color{blue}{\cos(x)}} ({\color{red}{e^x}})' \\[5pt]
&= {\color{blue}{-\sin(x)}} {\color{red}{e^x}} + {\color{blue}{\cos(x)}} {\color{red}{e^x}} \\[5pt]
&= ({\color{blue}{\cos(x)}} - {\color{blue}{\sin(x)}}) {\color{red}{e^x}}
\end{align*}
$$


##### Third example

$$
\begin{align*}
\tan(x) 
&= \left(\frac{\color{blue}{\sin(x)}}{\color{red}{\cos(x)}}\right)' \\[5pt]
&= \frac{(\color{blue}{\sin(x)})'(\color{red}{\cos(x)}) - (\color{red}{\cos(x)})'(\color{blue}{\sin(x)})}{(\color{red}{\cos(x)})^2} \\[5pt]
&= \frac{\color{blue}{\cos(x)}\color{red}{\cos(x)} - (\color{red}{-\sin(x)})(\color{blue}{\sin(x)})}{(\color{red}{\cos(x)})^2} \\[5pt]
&= \frac{\color{red}{\cos^2(x)} + \color{blue}{\sin^2(x)}}{\color{red}{\cos^2(x)}} \\[5pt]
&= \frac{1}{\color{red}{\cos^2(x)}}
\end{align*}
$$

#### Chain Rule

This is a very important rule that allows us to differentiate composite functions. If ${\color{red}f}(x)={\color{blue}g}({\color{green}h}(x))$, then
$$
{\color{red}f}'(x)={\color{blue}g}'({\color{green}h}(x)){\color{green}h}'(x)
$$

##### First example

Let ${\color{red}f}(x)={\color{blue}\sin}({\color{green}x^2})$. Then

* ${\color{blue}g}(y)=\sin(y) \Rightarrow {\color{blue}g}'(y)=\cos(y)$
* ${\color{green}h}(x)=x^2 \Rightarrow {\color{green}h}'(x)=2x$

so

$$
\begin{align*}
{\color{red}f}'(x)&={\color{blue}g}'({\color{green}h}(x)){\color{green}h}'(x)=\cos(x^2)\cdot 2x
\end{align*}
$$

##### Second example

Let $f(x)=e^{x^2+\cos(x)}$. Then

* $g(y)=e^y \Rightarrow g'(y)=e^y$
* $h(x)=x^2+\cos(x) \Rightarrow h'(x)=2x-\sin(x)$

so

$$
\begin{align*}
f'(x)&=g'(h(x))h'(x)=e^{x^2+\cos(x)}\cdot (2x-\sin(x))
\end{align*}
$$


## Integrals

### Rieman Integral

The **Riemann integral** of a function $f(x)$ over the interval $[a,b]$ is defined as:

$$
\int_{a}^{b} f(x) \, dx = \lim_{n \to \infty} \sum_{i=1}^{n} f(x_i) \Delta x
$$

where $\Delta x = \frac{b-a}{n}$ and $x_i = a + i \Delta x$.

```{python}
import numpy as np
import matplotlib.pyplot as plt

# Define the function to integrate
def f(x):
    return x**2

# Define the interval [a, b]
a, b = 0, 2

# Number of rectangles
n = 10

# Calculate the width of each rectangle
dx = (b - a) / n

# Define the x values for the left endpoints
x = np.linspace(a, b, n, endpoint=False)

# Calculate the y values (height of rectangles)
y = f(x)

# Plot the function
x_fine = np.linspace(a, b, 500)
plt.plot(x_fine, f(x_fine), label='f(x) = x^2', color='blue')

# Draw the rectangles
for i in range(n):
    plt.bar(x[i], y[i], width=dx, align='edge', edgecolor='black', color='orange', alpha=0.5)

# Add labels and title
plt.title('Riemann Sum Approximation')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.axhline(0, color='black', linewidth=0.8)
plt.axvline(0, color='black', linewidth=0.8)
plt.legend()
plt.grid(alpha=0.3)

# Show the plot
plt.show()

```


```{=html}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Riemann Integral Simulation</title>
    <style>
        canvas {
            display: block;
            margin: 20px auto;
            border: 1px solid black;
        }
    </style>
</head>
<body>
    <canvas id="riemannCanvas" width="800" height="400"></canvas>
    <script>
        const canvas = document.getElementById("riemannCanvas");
        const ctx = canvas.getContext("2d");

        const width = canvas.width;
        const height = canvas.height;

        // Function to integrate (f(x) = x^2)
        function f(x) {
            return x * x;
        }

        // Simulation parameters
        const a = 0; // Start of the interval
        const b = 2; // End of the interval
        let n = 1;   // Number of rectangles (starts small for animation)
        const maxRectangles = 50; // Maximum number of rectangles
        const speed = 500; // Milliseconds between updates

        // Scale factors
        const xScale = width / (b - a);
        const yScale = height / Math.pow(b, 2);

        // Animation loop
        function drawRiemannSum() {
            // Clear the canvas
            ctx.clearRect(0, 0, width, height);

            // Draw axes
            ctx.beginPath();
            ctx.moveTo(0, height);
            ctx.lineTo(width, height);
            ctx.moveTo(0, 0);
            ctx.lineTo(0, height);
            ctx.strokeStyle = "black";
            ctx.lineWidth = 2;
            ctx.stroke();

            // Draw the function curve
            ctx.beginPath();
            for (let x = a; x <= b; x += 0.01) {
                const canvasX = x * xScale;
                const canvasY = height - f(x) * yScale;
                ctx.lineTo(canvasX, canvasY);
            }
            ctx.strokeStyle = "blue";
            ctx.lineWidth = 2;
            ctx.stroke();

            // Draw the rectangles
            const dx = (b - a) / n;
            for (let i = 0; i < n; i++) {
                const xLeft = a + i * dx;
                const yHeight = f(xLeft);
                const rectX = xLeft * xScale;
                const rectY = height - yHeight * yScale;
                const rectWidth = dx * xScale;
                const rectHeight = yHeight * yScale;

                ctx.fillStyle = "orange";
                ctx.fillRect(rectX, rectY, rectWidth, rectHeight);
                ctx.strokeStyle = "black";
                ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);
            }

            // Increase the number of rectangles for the next frame
            if (n < maxRectangles) {
                n++;
            } else {
                n = 1; // Reset the number of rectangles to loop the animation
            }

            // Call the function again for the next frame
            setTimeout(drawRiemannSum, speed);
        }

        // Start the simulation
        drawRiemannSum();
    </script>
</body>
</html>
```